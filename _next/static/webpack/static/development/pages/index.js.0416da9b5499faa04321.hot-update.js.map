{"version":3,"file":"static/webpack/static/development/pages/index.js.0416da9b5499faa04321.hot-update.js","sources":["webpack:///./components/Header.tsx"],"sourcesContent":["import { useMemo, useState, useCallback } from 'react';\nimport Link from 'next/link';\nimport styled, { css } from 'styled-components';\nimport { Layout } from 'antd';\nimport InlineSVG from 'react-svg';\n\nimport { getRelativePath, scrollToID } from '@/utils';\nimport { media } from '@/themes/helper';\nimport useWindowScroll from '@/hooks/useWindowScroll';\n\nconst Wrapper = styled(({ hideUp, ...res }) => <Layout.Header {...res} />)<{\n  hideUp: boolean;\n}>`\n  position: fixed;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 55px;\n  padding: 12px ${props => props.theme.headerHorizontalPadding};\n  z-index: ${props => props.theme.z.header};\n  background-color: ${props => props.theme.colors.black};\n  border-bottom: solid 1px rgba(51, 51, 51, 0.65);\n  transform: translateY(0);\n  transition: all 0.3s ease-in;\n\n  ${media('pad')} {\n    height: ${props => props.theme.headerHeight};\n  }\n\n  ${p =>\n    p.hideUp &&\n    css`\n      transform: translateY(-100%);\n    `}\n`;\n\nconst LogoTitle = styled.img`\n  height: 1.5rem;\n`;\n\nconst Circle = styled(InlineSVG)<{ open: boolean }>`\n  transform: ${p => (p.open ? 'rotateZ(270deg)' : 'rotateZ(0deg)')};\n  transition: transform 0.3s ease-in-out;\n  cursor: pointer;\n  svg {\n    height: 2em;\n    transform: translateY(5px);\n    path {\n      fill: ${p => (p.open ? 'white' : p.theme.colors.main)};\n    }\n  }\n`;\n\nconst SmallCircle = styled(InlineSVG)`\n  margin-right: 0.5em;\n  svg {\n    height: 1em;\n  }\n`;\n\nconst BgWrapper = styled.div<{ open: boolean }>`\n  position: fixed;\n  right: 0;\n  top: 0;\n  width: 100vw;\n  height: ${p => (p.open ? '100vh' : '0')};\n  color: ${p => p.theme.colors.main};\n  background: ${p => p.theme.colors.black};\n  z-index: ${p => p.theme.z.header - 1};\n  transition: height 0.5s ease-in-out;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n\n  > div {\n    display: ${p => (p.open ? 'flex' : 'none')};\n    cursor: pointer;\n    align-items: center;\n    margin-bottom: 1em;\n    min-width: 100px;\n\n    &:hover {\n      color: white;\n      path {\n        fill: white;\n      }\n    }\n  }\n\n  p {\n    margin: 0;\n    font-size: ${p => p.theme.fontSize.m};\n  }\n`;\n\nconst SectionSelectWrapper = styled.div`\n  display: none;\n  ${media('desktop')} {\n    margin-right: auto;\n    margin-left: 3%;\n    max-width: 65%;\n    height: 100%;\n    overflow: scroll;\n\n    > div {\n      cursor: pointer;\n      margin-right: 1.5em;\n      font-weight: 300;\n      color: ${p => p.theme.colors.main};\n      \n      &:hover, &.active {\n        color: white;\n      }\n    }\n  }\n`;\n\nexport type TSection = {\n  name: string;\n  id: string;\n};\n\nconst Header: React.FunctionComponent<{ sections?: TSection[] }> = ({\n  sections,\n}) => {\n  const [open, setOpen] = useState<boolean>(false);\n  const { y, oldY } = useWindowScroll();\n  const firstSectionHeight = useMemo(() => {\n    if (y) {\n      const section = document.getElementById('first-section');\n      return section && section.offsetHeight;\n    }\n    return Infinity;\n  }, [!!y]);\n\n  // If page has no first section, outOfFirst always be correct\n  const outOfFirst = !firstSectionHeight || y >= firstSectionHeight;\n\n  const scrollTo = useCallback((section: TSection) => {\n    scrollToID(section.id);\n    setOpen(false);\n  }, ['no change']);\n\n  return (\n    <>\n      <Wrapper hideUp={outOfFirst && !open && y > oldY}>\n        <LogoTitle\n          src={getRelativePath('/static/logo-title.png')}\n          alt=\"logo-title\"\n        />\n        {sections && (\n          <SectionSelectWrapper>\n            {sections.map(section => (\n              <div key={section.id} onClick={() => scrollTo(section)}>{section.name}</div>\n            ))}\n          </SectionSelectWrapper>\n        )}\n        <Circle\n          open={open}\n          src={getRelativePath('/static/circle.svg')}\n          onClick={() => setOpen(state => !state)}\n        />\n      </Wrapper>\n      <BgWrapper open={open}>\n        <Link href=\"/\">\n          <div onClick={() => setOpen(false)}>\n            <SmallCircle\n              src={getRelativePath('/static/circle.svg')}\n              wrapper=\"span\"\n            />\n            <p>Home</p>\n          </div>\n        </Link>\n        <Link href=\"/products\">\n          <div onClick={() => setOpen(false)}>\n            <SmallCircle\n              src={getRelativePath('/static/circle.svg')}\n              wrapper=\"span\"\n            />\n            <p>Products</p>\n          </div>\n        </Link>\n      </BgWrapper>\n    </>\n  );\n};\n\nexport default Header;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAAA;AAGA;AAAA;AAOA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AACA;AAAA;AAOA;AAAA;AAKA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AASA;AAAA;AAgBA;AAAA;AAIA;AAAA;AAAA;AAAA;AAaA;AAAA;AACA;AAaA;AAEA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AAFA;AAMA;AACA;AAAA;AAAA;AAAA;AAAA;AADA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAHA;AAMA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAUA;AACA;AACA;;;;A","sourceRoot":""}